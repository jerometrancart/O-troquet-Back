
security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    providers:
         app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false


        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        users:
            pattern:   ^/api/v1/users
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        #C/C pour rajouter des "endpoint" proteg√©s
        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator


            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

            form_login:
                login_path: app_login
                check_path: app_login
                username_parameter: login[_username]
                password_parameter: login[_password]

            logout:
                path:   /logout
                target: /
            

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/reset-password, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/v1/users, roles: IS_AUTHENTICATED_FULLY}
        - { path: ^/confirm_account, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/(login|register), roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/user, roles: ROLE_ADMIN }
        - { path: '(update|view|banned|unbanned|edit)', roles: ROLE_ADMIN }
        - { path: ^/\w+, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SUPER_ADMIN : ROLE_ADMIN
        ROLE_ADMIN: ROLE_USER
